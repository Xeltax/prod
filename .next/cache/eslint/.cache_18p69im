[{"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Button.tsx":"1","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\IndexCard.tsx":"2","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Input.tsx":"3","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Layout.tsx":"4","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\LoginForm.tsx":"5","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Modal.tsx":"6","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Nav.tsx":"7","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\hook\\useModal.tsx":"8","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\ActiveRooms\\[uuid].tsx":"9","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\auth\\[...nextauth].ts":"10","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\room.ts":"11","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\story.ts":"12","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\suite.ts":"13","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\user.ts":"14","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\dashboard.tsx":"15","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\index.tsx":"16","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\Rooms.tsx":"17","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\_app.tsx":"18","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\_document.tsx":"19"},{"size":693,"mtime":1681723642616,"results":"20","hashOfConfig":"21"},{"size":695,"mtime":1681713013420,"results":"22","hashOfConfig":"21"},{"size":957,"mtime":1681723642616,"results":"23","hashOfConfig":"21"},{"size":818,"mtime":1686231517378,"results":"24","hashOfConfig":"21"},{"size":2822,"mtime":1686231971048,"results":"25","hashOfConfig":"21"},{"size":1003,"mtime":1681723642620,"results":"26","hashOfConfig":"21"},{"size":3983,"mtime":1686231998762,"results":"27","hashOfConfig":"21"},{"size":567,"mtime":1683625897244,"results":"28","hashOfConfig":"21"},{"size":11378,"mtime":1686233556284,"results":"29","hashOfConfig":"21"},{"size":1937,"mtime":1686234166442,"results":"30","hashOfConfig":"21"},{"size":2514,"mtime":1686233245887,"results":"31","hashOfConfig":"21"},{"size":1629,"mtime":1686232140059,"results":"32","hashOfConfig":"21"},{"size":588,"mtime":1681723642625,"results":"33","hashOfConfig":"21"},{"size":2160,"mtime":1681713013425,"results":"34","hashOfConfig":"21"},{"size":213,"mtime":1681713013426,"results":"35","hashOfConfig":"21"},{"size":2088,"mtime":1686232169261,"results":"36","hashOfConfig":"21"},{"size":3728,"mtime":1686232237156,"results":"37","hashOfConfig":"21"},{"size":587,"mtime":1681713013423,"results":"38","hashOfConfig":"21"},{"size":244,"mtime":1681713013423,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18d2yd5",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Button.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\IndexCard.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Input.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Layout.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\LoginForm.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Modal.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\component\\Nav.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\hook\\useModal.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\ActiveRooms\\[uuid].tsx",["98"],["99"],"import {GetStaticPaths, GetStaticProps} from \"next\";\r\nimport getRooms, {createRoom, enterRoom, leaveRoom, Room} from \"@/pages/api/room\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Layout from \"@/component/Layout\";\r\nimport styles from '@/styles/pages/activeRoom.module.scss'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBars, faEdit, faPlus, faTrashCan, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { motion } from \"framer-motion\"\r\nimport {getOneSuite, Suite} from \"@/pages/api/suite\";\r\nimport Input from \"@/component/Input\";\r\nimport {signIn, useSession} from \"next-auth/react\";\r\nimport Button from \"@/component/Button\";\r\nimport Modal from \"@/component/Modal\";\r\nimport useModal from \"@/hook/useModal\";\r\nimport getStories, {createStory, deleteStory, Story} from \"@/pages/api/story\";\r\nimport {log} from \"util\";\r\nimport {addUser, User} from \"@/pages/api/user\";\r\nimport {number} from \"prop-types\";\r\n\r\nexport const getStaticProps: GetStaticProps = async (context) => {\r\n    const itemID = context.params?.uuid;\r\n    const data = await getRooms();\r\n    // @ts-ignore\r\n    const foundItem = data.find((item: any) => itemID === item.uuid);\r\n\r\n    // enterRoom(itemID)\r\n\r\n    if (foundItem === undefined || foundItem === null || !foundItem) {\r\n        return {\r\n            notFound: true,\r\n        }\r\n    } else {\r\n        return {\r\n            props: {\r\n                room: foundItem\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getStaticPaths: GetStaticPaths = async () => {\r\n    const data = await getRooms();\r\n    // @ts-ignore\r\n    const pathsWithParams = data.map((item: any) => ({ params: { uuid: item.uuid }}))\r\n\r\n    return {\r\n        paths: pathsWithParams,\r\n        fallback: true\r\n    }\r\n}\r\n\r\n\r\nexport default function ActiveRoom(props: { room: Room }) {\r\n    const {isOpen, toggle} = useModal();\r\n    const {isOpen2, toggle2} = useModal();\r\n    const {isOpen3, toggle3} = useModal();\r\n    const [users, setUsers] = React.useState<any>([])\r\n    const [suite, setSuite] = React.useState<Suite>({} as Suite)\r\n    const { data: session, status } = useSession()\r\n    const [name , setName] = useState<string>('')\r\n    const [description , setDescription] = useState<string>('')\r\n    const [id , setId] = useState<number>(0)\r\n    const [refresh, setRefresh] = useState<boolean>(false);\r\n    const [dataStories, setDataStories] = useState<any>([]);\r\n    const [activeStory, setActiveStory] = useState<any>(1);\r\n\r\n\r\n    const story : Story = {\r\n        name: name,\r\n        description: description,\r\n        idRoom: id\r\n    }\r\n    const [username, setUsername] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [email, setEmail] = useState<string>('');\r\n    const [completeName, setCompleteName] = useState<string>('');\r\n\r\n    const user : User = {\r\n        username: username,\r\n        password: password,\r\n        email: email,\r\n        completeName: completeName\r\n    }\r\n    //\r\n    // if (props.room === undefined || props.room === null || !props.room) {\r\n    //     return\r\n    // }\r\n\r\n    useEffect(() => {\r\n        setRefresh(false)\r\n        getStories(props.room.id).then((res) => { setDataStories(res) })\r\n        setUsers(JSON.parse(props.room.connectedUsers as unknown as string))\r\n        // @ts-ignore\r\n        const dataSuite = getOneSuite(props.room.suite).then((res) => { setSuite(res) })\r\n        if (status === 'unauthenticated') {\r\n            toggle()\r\n        } else if (status === 'authenticated') {\r\n            // @ts-ignore\r\n            enterRoom(props.room.uuid, session?.user.user.id)\r\n        }\r\n    }, [props.room, status, refresh])\r\n\r\n    let suiteValues = [];\r\n    if (suite.suitevalues) {\r\n        // @ts-ignore\r\n        suiteValues = JSON.parse(suite.suitevalues);\r\n    }\r\n\r\n    if (session?.user) {\r\n        // @ts-ignore\r\n      enterRoom(props.room.uuid, session?.user.id)\r\n    } else if (!isOpen && !isOpen2 && !session?.user) {\r\n      \r\n    }\r\n\r\n    if (props.room === undefined || props.room === null || !props.room) {\r\n        return\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <div>\r\n                <h1 className={styles.activeRoomTitle}>{props.room.name}</h1>\r\n                <div className={styles.activeRoomUsers}>\r\n                    <div className={styles.cardContainer}>\r\n                        {suiteValues && suiteValues.map((value: any, index: number) => {\r\n                            return (\r\n                                // eslint-disable-next-line react/jsx-key\r\n                                <motion.div\r\n                                    whileHover={{ scale: 1.05, transition: { duration: 0.2 }, translateY: -5 }}\r\n                                    className={styles.card}>\r\n                                    <div className={styles.topValue}>{value}</div>\r\n                                    <h1>{value}</h1>\r\n                                    <div className={styles.bottomValue}>{value}</div>\r\n                                </motion.div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n\r\n                    <div className={styles.usersContainer}>\r\n                        <p>Connecté(e)s ({users.length})</p>\r\n                        {users.map((user: any, index: number) => {\r\n                           return (\r\n                               <div key={index} className={styles.connectedUsers}>\r\n                                   <FontAwesomeIcon icon={faUser} />\r\n                                   <p>{user.username}</p>\r\n                               </div>\r\n                           )\r\n                        })}\r\n                        <div className={styles.inviteMate}>\r\n                            <p>Inviter un participant</p>\r\n                            <input disabled={true} type=\"text\" value={'http://127.0.0.1:3000/ActiveRooms/'+props.room.uuid} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.storiesContainer}>\r\n                    <div className={styles.storiesContainerHeader}>\r\n                        <div className={styles.titleContainer}>\r\n                            <p onClick={()=>setActiveStory(1)}>Active Stories</p>\r\n                            <p onClick={()=>setActiveStory(2)}>Completed Stories</p>\r\n                            <p onClick={()=>[setActiveStory(3), ]}>All Stories ({dataStories.length})</p>\r\n                        </div>\r\n                        <div className={styles.buttonContainer} onClick={()=>toggle3()}>\r\n                            <FontAwesomeIcon icon={faPlus}/>New\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.storiesContainerBody}>\r\n                        <table>\r\n                            <thead>\r\n                                <tr style={ activeStory > 1 ? {display : \"flex\", justifyContent : \"space-between\"} : {display : \"none\"}}>\r\n                                    <td>Story</td>\r\n                                    <td>Points</td>\r\n                                </tr>\r\n                            </thead>\r\n                            {dataStories.map((story: any, index: number) => {\r\n                                if (story.points === null){\r\n                                    return (\r\n                                        <>\r\n                                            <tr style={ activeStory == 1 ? {display : \"flex\"} : {display : \"none\"}}>\r\n                                                <td><FontAwesomeIcon icon={faBars}/> {story.name}</td>\r\n                                                <td><FontAwesomeIcon onClick={()=>{deleteStory(story); dataStories.splice(story.id); setRefresh(true)}} icon={faTrashCan}/></td>\r\n                                            </tr>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                if (story.points !== null){\r\n                                    return (\r\n                                        <>\r\n                                            <tr style={ activeStory == 2 ? {display : \"flex\"} : {display : \"none\"}}>\r\n                                                <td>{story.name}</td>\r\n                                                <td>{story.points}</td>\r\n                                            </tr>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                return (\r\n                                    <>\r\n                                        <tr style={ activeStory == 3 ? {display : \"flex\"} : {display : \"none\"}}>\r\n                                            <td>{story.name}</td>\r\n                                            <td>{story.points == null ? \"-\" : story.points}</td>\r\n                                        </tr>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal isOpen={isOpen3} toggle={toggle3} title={'Créer une User Story'}>\r\n                <Input label={'Nom de la story'} type={'text'} inputData={setName} value={name} placeholder={'Nom'}/>\r\n                <Input label={'Description de la story'} type={'text'} inputData={setDescription} value={description} placeholder={\"Description\"} />\r\n                <Button event={() => { // @ts-ignore\r\n                    createStory(story, session?.user); toggle3(); setRefresh(true)}}>Valider</Button>\r\n            </Modal>\r\n            <Modal isOpen={isOpen} toggle={toggle} title={'Connexion'}>\r\n                <Input type={'text'} placeholder={'Nom d\\'utilisateur'} inputData={setUsername} value={username} label={'Nom d\\'utilisateur'}/>\r\n                <Input type={'password'} placeholder={'Mot de passe'} inputData={setPassword} value={password} label={'Mot de passe'}/>\r\n                <Button event={() => {\r\n                    toggle()\r\n                    signIn(\"credentials\",{\"username\" : username, \"password\" : password})\r\n                }}>Se connecter</Button>\r\n                <p>Vous n'avez pas encore de compte ? <a onClick={() => {toggle(); toggle2()}}>Créer cotre compte</a></p>\r\n            </Modal>\r\n            <Modal isOpen={isOpen2} toggle={toggle2} title={'Création de compte'}>\r\n                <Input type={'text'} placeholder={'Nom d\\'utilisateur'} inputData={setUsername} value={username} label={'Nom d\\'utilisateur'}/>\r\n                <Input type={'email'} placeholder={'Addresse Email'} inputData={setEmail} value={email} label={'Email'}/>\r\n                <Input type={'text'} placeholder={'Nom complet (Ex : Jhon Smith)'} inputData={setCompleteName} value={completeName} label={'Nom complet'}/>\r\n                <Input type={'password'} placeholder={'Mot de passe'} inputData={setPassword} value={password} label={'Mot de passe'}/>\r\n                <Button event={() => {\r\n                    toggle2()\r\n                    addUser(user)\r\n                }}>Créer mon compte</Button>\r\n                <p>Vous avez déjà un compte ? <a onClick={() => {toggle2(); toggle()}}>Connecté vous</a></p>\r\n            </Modal>\r\n        </Layout>\r\n    )\r\n}","C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\auth\\[...nextauth].ts",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\room.ts",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\story.ts",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\suite.ts",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\api\\user.ts",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\dashboard.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\index.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\Rooms.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\_app.tsx",[],[],"C:\\Users\\xelta\\Documents\\PlanitPokerStar\\front-next\\src\\pages\\_document.tsx",[],[],{"ruleId":"100","severity":1,"message":"101","line":101,"column":8,"nodeType":"102","endLine":101,"endColumn":37,"suggestions":"103"},{"ruleId":"104","severity":2,"message":"105","line":129,"column":33,"nodeType":"106","messageId":"107","endLine":135,"endColumn":46,"suppressions":"108"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'session?.user.user.id' and 'toggle'. Either include them or remove the dependency array.","ArrayExpression",["109"],"react/jsx-key","Missing \"key\" prop for element in iterator","JSXElement","missingIterKey",["110"],{"desc":"111","fix":"112"},{"kind":"113","justification":"114"},"Update the dependencies array to be: [props.room, status, refresh, toggle, session?.user.user.id]",{"range":"115","text":"116"},"directive","",[3641,3670],"[props.room, status, refresh, toggle, session?.user.user.id]"]